name: For Bayesian Machine Learning

on: [push]

env:
  REGISTRY: ghcr.io

jobs:
  build:
    name: Code Analysis
    runs-on: ubuntu-latest

    strategy:
      max-parallel: 4
      fail-fast: false
      matrix:
        python-version: [3.12]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f ${{ github.workspace }}/.devcontainer/requirements.txt ]; then pip install -r ${{ github.workspace }}/.devcontainer/requirements.txt; fi

      - name: Lint with flake8
        run: |
          printf "\n"
          echo "============================= flake8 session starts =============================="
          printf "\n"
          
          
          # stop the build if there are Python syntax errors or undefined names
          printf "\n"
          echo "Issues in relation to logic (F7), syntax (Python E9, Flake F7), mathematical
          formulae symbols (F63), undefined variable names (F82):"
          
          printf "\n src/data "
          flake8 --count --select=E9,F63,F7,F82 --show-source --statistics src/data
          
          printf "\n src/elements "
          flake8 --count --select=E9,F63,F7,F82 --show-source --statistics src/elements
          
          printf "\n src/functions "
          flake8 --count --select=E9,F63,F7,F82 --show-source --statistics src/functions
          
          printf "\n src/model "
          flake8 --count --select=E9,F63,F7,F82 --show-source --statistics src/model/algorithm.py
          flake8 --count --select=E9,F63,F7,F82 --show-source --statistics src/model/inference.py
          
          printf "\n src/main.py "
          flake8 --count --select=E9,F63,F7,F82 --show-source --statistics src/main.py
          
          
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          printf "\n\n"
          echo "Complexity issues:"
          
          printf "\n src/data "
          flake8 --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics src/data
          
          printf "\n src/elements "
          flake8 --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics src/elements
          
          printf "\n src/functions "
          flake8 --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics src/functions
          
          printf "\n src/model "
          flake8 --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics src/model/algorithm.py
          flake8 --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics src/model/inference.py
          
          printf "\n src/main.py "
          flake8 --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics src/main.py

      - name: Lint with pylint
        run: |
          printf "\n"
          echo "============================= pylint session starts =============================="

          printf "\n Package src/data"
          pylint --rcfile .pylintrc src/data
          
          printf "\n Package src/elements"
          pylint --rcfile .pylintrc src/elements
          
          printf "\n Package src/functions"
          pylint --rcfile .pylintrc src/functions
          
          printf "\n Package src/model"
          pylint --rcfile .pylintrc src/model/algorithm.py
          pylint --rcfile .pylintrc src/model/inference.py
          
          printf "\n Module src/main.py"
          pylint --rcfile .pylintrc src/main.py

      - name: Test with pytest
        run: |
          printf "\n"
          echo "============================= pytest session starts =============================="
          
          printf "\n pytest tests pending"

      - name: Coverage with pytest-cov
        run: |
          printf "\n "
          echo "============================= coverage session starts =============================="
          
          printf "\n test coverage tests pending"

  packages:
    name: GitHub Packages Container Registry
    needs: build
    if: ${{ false }}
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Logging into GitHub Container
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Build & Push
        shell: bash
        env:
          REPOSITORY: ${{ github.repository }}
          IMAGE_TAG: ${{ steps.meta.outputs.tags }}
        run: |
          docker build . --file Dockerfile --tag "$REGISTRY/$REPOSITORY:$IMAGE_TAG"
          docker push ${{ env.REGISTRY }}/${{ env.REPOSITORY }}:${{ env.IMAGE_TAG }}

  ecr:
    name: Amazon Elastic Container Registry
    needs: build
    if: ${{ false }}
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ENTRY }}:role/${{ secrets.AWS_ARN_ECR_ACTIONS }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registries: ${{ secrets.AWS_ENTRY }}
          mask-password: "true"

      - name: Build, tag, and push image to Amazon ECR
        id: build-publish
        shell: bash
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: 'patterns'
          IMAGE_TAG: ${{ github.event.repository.name }}
        run: |
          docker build . --file Dockerfile --tag "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          docker push "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          echo "An image has been pushed to $ECR_REGISTRY/$ECR_REPOSITORY"
          echo "The image tag is $IMAGE_TAG"